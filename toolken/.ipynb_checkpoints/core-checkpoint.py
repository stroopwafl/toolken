# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['clean_ipython_hist', 'clean_tb', 'clean_gpu', 'plot_images', 'get_device']

# %% ../nbs/00_core.ipynb 2
import gc
import torch
import sys
import traceback
import matplotlib.pyplot as plt

# %% ../nbs/00_core.ipynb 4
def clean_ipython_hist():
    # Code in this function mainly copied from IPython source
    if not 'get_ipython' in globals(): return
    ip = get_ipython()
    user_ns = ip.user_ns
    ip.displayhook.flush()
    pc = ip.displayhook.prompt_count + 1
    for n in range(1, pc): user_ns.pop('_i'+repr(n),None)
    user_ns.update(dict(_i='',_ii='',_iii=''))
    hm = ip.history_manager
    hm.input_hist_parsed[:] = [''] * pc
    hm.input_hist_raw[:] = [''] * pc
    hm._i = hm._ii = hm._iii = hm._i00 =  ''

# %% ../nbs/00_core.ipynb 5
def clean_tb():
    if hasattr(sys, 'last_traceback'):
        traceback.clear_frames(sys.last_traceback)
        delattr(sys, 'last_traceback')
    if hasattr(sys, 'last_type'): delattr(sys, 'last_type')
    if hasattr(sys, 'last_value'): delattr(sys, 'last_value')

# %% ../nbs/00_core.ipynb 6
def clean_gpu():
    clean_tb()
    clean_ipython_hist()
    gc.collect()
    torch.cuda.empty_cache()

# %% ../nbs/00_core.ipynb 7
def plot_images(images, rows=1, columns=5):
    fig, ax = plt.subplots(rows, columns, figsize=(18, 6))
    for i, image in enumerate(images):
        ax[i].imshow(image)

# %% ../nbs/00_core.ipynb 8
def get_device():
    if torch.cuda.is_available(): device = 'cuda'
    else: device = 'cpu'
    return device
