# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_tokenizer.ipynb.

# %% auto 0
__all__ = ['logger', 'Tokenizer', 'encode_to_tensor', 'decode_tokens']

# %% ../nbs/02_tokenizer.ipynb 2
from sentencepiece import SentencePieceProcessor
from logging import getLogger
from typing import List
import os
from torch import tensor
logger = getLogger()

# %% ../nbs/02_tokenizer.ipynb 3
class Tokenizer:
    def __init__(self, model_path: str):
        # reload tokenizer
        assert os.path.isfile(model_path), model_path
        self.sp_model = SentencePieceProcessor(model_file=model_path)
        logger.info(f"Reloaded SentencePiece model from {model_path}")

        # BOS / EOS token IDs
        self.n_words: int = self.sp_model.vocab_size()
        self.bos_id: int = self.sp_model.bos_id()
        self.eos_id: int = self.sp_model.eos_id()
        self.pad_id: int = self.sp_model.pad_id()
        logger.info(
            f"#words: {self.n_words} - BOS ID: {self.bos_id} - EOS ID: {self.eos_id}"
        )
        assert self.sp_model.vocab_size() == self.sp_model.get_piece_size()

    def encode(self, s: str, bos: bool, eos: bool) -> List[int]:
        assert type(s) is str
        t = self.sp_model.encode(s)
        if bos:
            t = [self.bos_id] + t
        if eos:
            t = t + [self.eos_id]
        return t

    def decode(self, t: List[int]) -> str:
        return self.sp_model.decode(t)

# %% ../nbs/02_tokenizer.ipynb 4
def encode_to_tensor(tokenizer, prompt: [List[str], str], eos=True):
    if type(prompt) == list: return [tensor(tokenizer.encode(p, bos=True, eos=eos)) for p in prompt]
    else: return tensor(tokenizer.encode(prompt, bos=True, eos=eos))

# %% ../nbs/02_tokenizer.ipynb 5
def decode_tokens(tokenizer, tokens, prompt_tokens, max_gen_len):
    decoded = []
    for i, t in enumerate(tokens.tolist()):
        # cut to max gen len
        t = t[: len(prompt_tokens[i]) + max_gen_len]
        # cut to eos tok if any
        try:
            t = t[: t.index(tokenizer.eos_id)]
        except ValueError:
            pass
        decoded.append(tokenizer.decode(t))
    return decoded
